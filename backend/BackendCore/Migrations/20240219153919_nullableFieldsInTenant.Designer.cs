// <auto-generated />
using System;
using BackendCore.Utils;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendCore.Migrations
{
    [DbContext(typeof(HomeManagementDbContext))]
    [Migration("20240219153919_nullableFieldsInTenant")]
    partial class nullableFieldsInTenant
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuildingNews", b =>
                {
                    b.Property<Guid>("BuildingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BuildingsId", "NewsId");

                    b.HasIndex("NewsId");

                    b.ToTable("BuildingNews");
                });

            modelBuilder.Entity("Entities.Models.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BillStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BillStatusId");

                    b.HasIndex("RoomId");

                    b.ToTable("Bills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bfa7b59f-ba4d-4ddc-bfe4-49884dd0bd80"),
                            BillStatusId = 1,
                            Description = "",
                            IsDeleted = false,
                            RoomId = new Guid("4f2504e0-4f89-41d3-8a0c-0305e82c3303")
                        });
                });

            modelBuilder.Entity("Entities.Models.BillDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentElectricityReading")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWaterReading")
                        .HasColumnType("int");

                    b.Property<decimal>("ElectricityPricePerMonth")
                        .HasColumnType("money");

                    b.Property<int>("PreviousElectricityReading")
                        .HasColumnType("int");

                    b.Property<int>("PreviousWaterReading")
                        .HasColumnType("int");

                    b.Property<decimal>("RoomRentPrice")
                        .HasColumnType("money");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WaterPricePerMonth")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BillId")
                        .IsUnique();

                    b.ToTable("BillDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd5aabe7-f87b-4d27-9896-91a1ef83a91e"),
                            BillId = new Guid("bfa7b59f-ba4d-4ddc-bfe4-49884dd0bd80"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentElectricityReading = 1161,
                            CurrentWaterReading = 120,
                            ElectricityPricePerMonth = 3200m,
                            PreviousElectricityReading = 1030,
                            PreviousWaterReading = 100,
                            RoomRentPrice = 4000000m,
                            WaterPricePerMonth = 15000m
                        });
                });

            modelBuilder.Entity("Entities.Models.BillStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BillStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Chưa trả"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Đã trả"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Quá hạn"
                        });
                });

            modelBuilder.Entity("Entities.Models.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("ElectricityPricePerMonth")
                        .HasColumnType("money");

                    b.Property<Guid>("HomeManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WaterPricePerMonth")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("HomeManagerId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            Address = "123 Đường Chính",
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đây là mô tả mẫu cho tòa nhà.",
                            ElectricityPricePerMonth = 2675.0m,
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            IsDeleted = false,
                            Name = "Chung cư An Nhiên",
                            WaterPricePerMonth = 21000.0m
                        },
                        new
                        {
                            Id = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            Address = "456 Đường Phong",
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mô tả khác cho tòa nhà.",
                            ElectricityPricePerMonth = 2500.0m,
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            IsDeleted = false,
                            Name = "Chung cư mini Lạc Quân",
                            WaterPricePerMonth = 22000.0m
                        },
                        new
                        {
                            Id = new Guid("5f2504e0-4f89-41d3-9a0c-0305e82c3305"),
                            Address = "789 Đường Sồi",
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mô tả khác cho tòa nhà.",
                            ElectricityPricePerMonth = 2700.0m,
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3302"),
                            IsDeleted = false,
                            Name = "Tòa nhà 68",
                            WaterPricePerMonth = 15000.0m
                        },
                        new
                        {
                            Id = new Guid("9f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            Address = "1617 Đường Thông",
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mô tả cho tòa nhà.",
                            ElectricityPricePerMonth = 3500.0m,
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3307"),
                            IsDeleted = false,
                            Name = "Chung cư mini 102",
                            WaterPricePerMonth = 27000.0m
                        },
                        new
                        {
                            Id = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            Address = "2223 Đường Vũ Bạch",
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mô tả cho tòa nhà.",
                            ElectricityPricePerMonth = 3400.0m,
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3310"),
                            IsDeleted = false,
                            Name = "Trọ Vũ Bạch",
                            WaterPricePerMonth = 20000.0m
                        });
                });

            modelBuilder.Entity("Entities.Models.BuildingResident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PortraitPictureUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("BuildingResidents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BuildingResident");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.BuildingService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("BuildingServices", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("BuildingServicesHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1690607-068b-47df-973d-7babb3efc1e8"),
                            BuildingId = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            Name = "Tiền máy giặt",
                            PricePerMonth = 100000m
                        },
                        new
                        {
                            Id = new Guid("9b9d671f-7196-49d2-9fe7-d439aa2dac3a"),
                            BuildingId = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            Name = "Tiền xe",
                            PricePerMonth = 50000m
                        },
                        new
                        {
                            Id = new Guid("f5610f03-3992-428c-8c45-d31309c72799"),
                            BuildingId = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            Name = "Tiền rác",
                            PricePerMonth = 20000m
                        },
                        new
                        {
                            Id = new Guid("8f696d6a-034b-41af-949a-969f78935a22"),
                            BuildingId = new Guid("9f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            Name = "Tiền thang máy",
                            PricePerMonth = 20000m
                        });
                });

            modelBuilder.Entity("Entities.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("money");

                    b.Property<DateTime>("ExpectedCheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("HomeManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("NumberOfTenants")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RealCheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HomeManagerId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TenantId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("08be2e31-4abb-446c-8b22-d25d140aa0d7"),
                            CheckInDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = 3000000m,
                            ExpectedCheckOutDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            IsDeleted = false,
                            Note = "",
                            NumberOfTenants = 3,
                            RoomId = new Guid("4f2504e0-4f89-41d3-8a0c-0305e82c3303"),
                            TenantId = new Guid("b4e6ea80-f066-44f4-aa55-30e0a0fe30af")
                        },
                        new
                        {
                            Id = new Guid("40c3a2c4-dede-4722-be95-48a67c45f552"),
                            CheckInDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = 3000000m,
                            ExpectedCheckOutDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            IsDeleted = false,
                            Note = "",
                            NumberOfTenants = 2,
                            RoomId = new Guid("4f2504e0-4f89-41d3-7a0c-0305e82c3303"),
                            TenantId = new Guid("a1e1f042-ab4a-431e-8a8e-710e2eceffc3")
                        },
                        new
                        {
                            Id = new Guid("df9af346-6a2e-4930-ad39-5480c984eff9"),
                            CheckInDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = 3000000m,
                            ExpectedCheckOutDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            IsDeleted = false,
                            Note = "",
                            NumberOfTenants = 3,
                            RoomId = new Guid("cbf552c9-bbfb-4920-9f43-9782c33d88e8"),
                            TenantId = new Guid("4f9038f6-dcfd-40d4-96ed-601686db6b11")
                        },
                        new
                        {
                            Id = new Guid("417a93ea-bc60-4c30-a4c1-d3b856889b08"),
                            CheckInDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deposit = 3000000m,
                            ExpectedCheckOutDate = new DateTime(2025, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3302"),
                            IsDeleted = false,
                            Note = "",
                            NumberOfTenants = 1,
                            RoomId = new Guid("db740cec-f865-455b-874e-aa8e3436115f"),
                            TenantId = new Guid("86f1e1d1-5ab7-48d3-8b14-97b0ad42018e")
                        });
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("HomeManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HomeManagerId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68d0f123-4855-4004-bdf2-aeebae8f7bde"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đến giờ đóng tiền nhà rồi, không đóng không cho ở. Có 10 phút kể từ thông báo này để đóng.",
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            Title = "Đóng tiền điện nước tháng 12/2023"
                        },
                        new
                        {
                            Id = new Guid("2a9306b5-7c9d-4cda-82c7-94c7641de97e"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đến giờ đóng tiền nhà rồi, không đóng không cho ở. Có 10 phút kể từ thông báo này để đóng.",
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3302"),
                            Title = "Đóng tiền nhà tháng 1/2024"
                        },
                        new
                        {
                            Id = new Guid("0b447141-a4eb-4444-9d6a-d35ba9693995"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Đến giờ đóng tiền nhà rồi, không đóng không cho ở. Có 10 phút kể từ thông báo này để đóng.",
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3306"),
                            Title = "Đóng tiền điện nước tháng 12/2023"
                        });
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReaded")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74f47318-9d30-47f0-9d6b-623c60acd9e7"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReaded = true,
                            Message = "Đóng tiền nhà tháng 12/2023",
                            TenantId = new Guid("b4e6ea80-f066-44f4-aa55-30e0a0fe30af")
                        },
                        new
                        {
                            Id = new Guid("acdf8315-a60b-469d-90eb-e450ebb1526c"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReaded = false,
                            Message = "Đóng tiền nhà tháng 12/2023",
                            TenantId = new Guid("f63c6963-7a41-4ab5-ad8e-4fef8a8a843f")
                        },
                        new
                        {
                            Id = new Guid("8088bf14-7543-4d5f-bb03-891998318b87"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsReaded = false,
                            Message = "Đóng tiền nhà tháng 12/2023",
                            TenantId = new Guid("257862cb-bfd1-4d55-ab50-10d186e3e8f4")
                        });
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("HomeManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RequestStatusId")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HomeManagerId");

                    b.HasIndex("RequestStatusId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9d7aac9-6978-4b71-b6ab-f56ac147f8b3"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Không có nước",
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            IsDeleted = false,
                            RequestStatusId = 1,
                            RequestTypeId = 2,
                            TenantId = new Guid("b4e6ea80-f066-44f4-aa55-30e0a0fe30af")
                        },
                        new
                        {
                            Id = new Guid("ba9f1f1a-46ad-4ebd-a5e3-f26daae31812"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thêm bình nóng lạnh",
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3306"),
                            IsDeleted = false,
                            RequestStatusId = 2,
                            RequestTypeId = 4,
                            TenantId = new Guid("f63c6963-7a41-4ab5-ad8e-4fef8a8a843f")
                        },
                        new
                        {
                            Id = new Guid("9d387606-2a10-4119-b5a5-16176626de19"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Có điều khiển điều hòa không?",
                            HomeManagerId = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3306"),
                            IsDeleted = false,
                            RequestStatusId = 3,
                            RequestTypeId = 1,
                            TenantId = new Guid("257862cb-bfd1-4d55-ab50-10d186e3e8f4")
                        });
                });

            modelBuilder.Entity("Entities.Models.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Chưa nhận"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Đã nhận"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Chấp nhận"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Từ chối"
                        });
                });

            modelBuilder.Entity("Entities.Models.RequestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Câu hỏi"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Phàn nàn"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Yêu cầu"
                        },
                        new
                        {
                            Id = 4,
                            Type = "Đề xuất"
                        },
                        new
                        {
                            Id = 5,
                            Type = "Khác"
                        });
                });

            modelBuilder.Entity("Entities.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Home Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tenant"
                        });
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("RoomNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-8a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "101"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-7a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "102"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-6a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "103"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-5a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "104"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-4a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "105"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-31d3-5a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "106"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-3a0c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "107"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-360c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "108"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-350c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "109"
                        },
                        new
                        {
                            Id = new Guid("4f2504e0-4f89-41d3-351c-0305e82c3303"),
                            BuildingId = new Guid("4f2504e0-4f89-41d3-9a0c-0305e82c3303"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "110"
                        },
                        new
                        {
                            Id = new Guid("99524668-bf7b-43fc-a198-37a66478c8e5"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "201"
                        },
                        new
                        {
                            Id = new Guid("8eb065ee-c50c-4a7e-ac97-6c795e6c02a2"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "202"
                        },
                        new
                        {
                            Id = new Guid("af339181-931c-4f9a-aa6a-06646aa77a75"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "203"
                        },
                        new
                        {
                            Id = new Guid("3b4b679b-9c20-4c1a-8407-0b7d7bff797e"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "204"
                        },
                        new
                        {
                            Id = new Guid("31652927-66b2-4cf0-8c88-6b1a10563aeb"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "205"
                        },
                        new
                        {
                            Id = new Guid("72f654f5-aeb6-410e-b5e9-51328acb04e6"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "206"
                        },
                        new
                        {
                            Id = new Guid("62caa73a-47cb-4b48-aaca-4052c0fdfb2e"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "207"
                        },
                        new
                        {
                            Id = new Guid("cbf552c9-bbfb-4920-9f43-9782c33d88e8"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "208"
                        },
                        new
                        {
                            Id = new Guid("28894308-5db2-4c90-99ad-45f9379a989b"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "209"
                        },
                        new
                        {
                            Id = new Guid("3f907bfa-cb32-4804-81f6-395b301f262e"),
                            BuildingId = new Guid("2f2504e0-4f89-41d3-9a0c-0305e82c3304"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "210"
                        },
                        new
                        {
                            Id = new Guid("c4939b2e-d7d9-41c9-83ea-e9557fd22f26"),
                            BuildingId = new Guid("5f2504e0-4f89-41d3-9a0c-0305e82c3305"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "210"
                        },
                        new
                        {
                            Id = new Guid("db740cec-f865-455b-874e-aa8e3436115f"),
                            BuildingId = new Guid("5f2504e0-4f89-41d3-9a0c-0305e82c3305"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "211"
                        },
                        new
                        {
                            Id = new Guid("82bc05ba-6175-4452-ab6c-f168c25d58e1"),
                            BuildingId = new Guid("5f2504e0-4f89-41d3-9a0c-0305e82c3305"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "212"
                        },
                        new
                        {
                            Id = new Guid("8f4700c0-bfdc-48b6-8bfa-bb0bf12f5c7d"),
                            BuildingId = new Guid("5f2504e0-4f89-41d3-9a0c-0305e82c3305"),
                            IsDeleted = false,
                            Price = 2000000.0m,
                            RoomNo = "213"
                        },
                        new
                        {
                            Id = new Guid("a61fee38-6669-4f35-aa9a-2589c09e28bf"),
                            BuildingId = new Guid("9f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "200"
                        },
                        new
                        {
                            Id = new Guid("c717d609-50ca-4427-89a0-555b7d75fb80"),
                            BuildingId = new Guid("9f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "201"
                        },
                        new
                        {
                            Id = new Guid("5dee6fd4-2989-4268-968a-bd8aaa7099db"),
                            BuildingId = new Guid("9f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "202"
                        },
                        new
                        {
                            Id = new Guid("0c55994e-91aa-4ab1-bbc2-b845aa2078fb"),
                            BuildingId = new Guid("9f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            IsDeleted = false,
                            Price = 4000000.0m,
                            RoomNo = "203"
                        },
                        new
                        {
                            Id = new Guid("be270fd3-7488-4bd2-ac23-c36c898ecf66"),
                            BuildingId = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            IsDeleted = false,
                            Price = 5000000.0m,
                            RoomNo = "401A"
                        },
                        new
                        {
                            Id = new Guid("8d1b5b5e-3c68-4a3b-bece-0544c71590b2"),
                            BuildingId = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            IsDeleted = false,
                            Price = 5000000.0m,
                            RoomNo = "402A"
                        },
                        new
                        {
                            Id = new Guid("4bc0fa1c-39cc-44c7-9e67-334706bef121"),
                            BuildingId = new Guid("cf2504e0-4f89-41d3-9a0c-0305e82c3312"),
                            IsDeleted = false,
                            Price = 5000000.0m,
                            RoomNo = "403A"
                        });
                });

            modelBuilder.Entity("Entities.Models.HomeManager", b =>
                {
                    b.HasBaseType("Entities.Models.BuildingResident");

                    b.HasDiscriminator().HasValue("HomeManager");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3301"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anh_tuan@example.com",
                            FullName = "Anh Tuấn",
                            IsDeleted = false,
                            IsMale = true,
                            Password = "password789",
                            PhoneNumber = "0551234567",
                            PortraitPictureUrl = "",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3302"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bich_hang@example.com",
                            FullName = "Bích Hằng",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "passwordabc",
                            PhoneNumber = "0659876543",
                            PortraitPictureUrl = "",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3306"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lam_truong@example.com",
                            FullName = "Lâm Trường",
                            IsDeleted = true,
                            IsMale = true,
                            Password = "password456",
                            PhoneNumber = "0852227890",
                            PortraitPictureUrl = "",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3307"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "linh_chau@example.com",
                            FullName = "Linh Châu",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "password789",
                            PhoneNumber = "0955556789",
                            PortraitPictureUrl = "",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3309"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quynh_nhu@example.com",
                            FullName = "Quỳnh Như",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "password456",
                            PhoneNumber = "0955555678",
                            PortraitPictureUrl = "",
                            RoleId = 2
                        },
                        new
                        {
                            Id = new Guid("3f2504e0-4f89-41d3-9a0c-0305e82c3310"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hoang_son@example.com",
                            FullName = "Hoàng Sơn",
                            IsDeleted = false,
                            IsMale = true,
                            Password = "password789",
                            PhoneNumber = "0955559012",
                            PortraitPictureUrl = "",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Tenant", b =>
                {
                    b.HasBaseType("Entities.Models.BuildingResident");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("RoomId");

                    b.HasDiscriminator().HasValue("Tenant");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4e6ea80-f066-44f4-aa55-30e0a0fe30af"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email1@example.com",
                            FullName = "Nguyễn Thị Linh",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0987654321",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1990, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("4f2504e0-4f89-41d3-8a0c-0305e82c3303")
                        },
                        new
                        {
                            Id = new Guid("f63c6963-7a41-4ab5-ad8e-4fef8a8a843f"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hyen4132@example.com",
                            FullName = "Hoàng Thị Yến",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0976543210",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("4f2504e0-4f89-41d3-8a0c-0305e82c3303")
                        },
                        new
                        {
                            Id = new Guid("257862cb-bfd1-4d55-ab50-10d186e3e8f4"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yen123@example.com",
                            FullName = "Vũ Hoàng Yến",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0965432109",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1992, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("4f2504e0-4f89-41d3-8a0c-0305e82c3303")
                        },
                        new
                        {
                            Id = new Guid("a1e1f042-ab4a-431e-8a8e-710e2eceffc3"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tva@example.com",
                            FullName = "Trần Văn A",
                            IsDeleted = false,
                            IsMale = true,
                            Password = "mk123",
                            PhoneNumber = "0954321098",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1985, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("4f2504e0-4f89-41d3-7a0c-0305e82c3303")
                        },
                        new
                        {
                            Id = new Guid("4f9038f6-dcfd-40d4-96ed-601686db6b11"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ptb@example.com",
                            FullName = "Phạm Thị B",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0943210987",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1986, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("cbf552c9-bbfb-4920-9f43-9782c33d88e8")
                        },
                        new
                        {
                            Id = new Guid("d7fbd8c3-8d8a-4dbb-be44-34b9d9c6d012"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lvc@example.com",
                            FullName = "Phạm Thị C",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0932109876",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1987, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("cbf552c9-bbfb-4920-9f43-9782c33d88e8")
                        },
                        new
                        {
                            Id = new Guid("ff4d981f-e335-4928-9f2c-db378e6afc5b"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ntd@example.com",
                            FullName = "Nguyễn Thị D",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0921098765",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1988, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("cbf552c9-bbfb-4920-9f43-9782c33d88e8")
                        },
                        new
                        {
                            Id = new Guid("86f1e1d1-5ab7-48d3-8b14-97b0ad42018e"),
                            CreatedAt = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tte@example.com",
                            FullName = "Trần Thị E",
                            IsDeleted = false,
                            IsMale = false,
                            Password = "mk123",
                            PhoneNumber = "0910987654",
                            PortraitPictureUrl = "",
                            RoleId = 3,
                            Address = "",
                            Dob = new DateTime(1989, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = new Guid("db740cec-f865-455b-874e-aa8e3436115f")
                        });
                });

            modelBuilder.Entity("BuildingNews", b =>
                {
                    b.HasOne("Entities.Models.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Bill", b =>
                {
                    b.HasOne("Entities.Models.BillStatus", "BillStatus")
                        .WithMany("Bills")
                        .HasForeignKey("BillStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Bills")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BillStatus");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.BillDetail", b =>
                {
                    b.HasOne("Entities.Models.Bill", "Bill")
                        .WithOne("BillDetail")
                        .HasForeignKey("Entities.Models.BillDetail", "BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("Entities.Models.Building", b =>
                {
                    b.HasOne("Entities.Models.HomeManager", "HomeManager")
                        .WithMany("Buildings")
                        .HasForeignKey("HomeManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HomeManager");
                });

            modelBuilder.Entity("Entities.Models.BuildingResident", b =>
                {
                    b.HasOne("Entities.Models.Role", "Role")
                        .WithMany("BuildingResidents")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Models.BuildingService", b =>
                {
                    b.HasOne("Entities.Models.Building", "Building")
                        .WithMany("BuildingServices")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Entities.Models.Contract", b =>
                {
                    b.HasOne("Entities.Models.HomeManager", "HomeManager")
                        .WithMany()
                        .HasForeignKey("HomeManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Contracts")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tenant", "Tenant")
                        .WithMany("Contracts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HomeManager");

                    b.Navigation("Room");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Entities.Models.News", b =>
                {
                    b.HasOne("Entities.Models.HomeManager", "HomeManager")
                        .WithMany("News")
                        .HasForeignKey("HomeManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HomeManager");
                });

            modelBuilder.Entity("Entities.Models.Notification", b =>
                {
                    b.HasOne("Entities.Models.Tenant", "Tenant")
                        .WithMany("Notifications")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Entities.Models.Request", b =>
                {
                    b.HasOne("Entities.Models.HomeManager", "HomeManager")
                        .WithMany("Requests")
                        .HasForeignKey("HomeManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("RequestStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.RequestType", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Models.Tenant", "Tenant")
                        .WithMany("Requests")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("HomeManager");

                    b.Navigation("RequestStatus");

                    b.Navigation("RequestType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.HasOne("Entities.Models.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("Entities.Models.Tenant", b =>
                {
                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Tenants")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Bill", b =>
                {
                    b.Navigation("BillDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.BillStatus", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("Entities.Models.Building", b =>
                {
                    b.Navigation("BuildingServices");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Entities.Models.RequestStatus", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Models.RequestType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Models.Role", b =>
                {
                    b.Navigation("BuildingResidents");
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Contracts");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("Entities.Models.HomeManager", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("News");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Models.Tenant", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("Notifications");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
